{"version":3,"sources":["handlers/handleStringToArray.js","handlers/handleGetLetters.js","index.js"],"names":["strToArr","str","arr","regex","test","replace","split","push","getLetters","word","position","map","item","charAt","app","document","querySelector","form","output","password","letters","pwdLength","countLetters","input","value","length","isBiggerThanPwd","x","addEventListener","e","preventDefault","some","innerHTML","join"],"mappings":";;AEAA;;AACA;;;ADDA,ADAA;ACCA,ADAA,AEEA,IDFMQ,ADAAR,AEEAc,GAAG,GAAGC,EFFE,ECAE,CDAC,ECAE,CCEC,CAACC,KFFfhB,ECAAQ,MDAW,AEEL,CFFKP,AEEkB,GDFhB,ADAC,CCAAQ,CDAI,CEEZ,CAAZ,CDFmB,EAAOC,QAAP;AAAA,ADCjB,AEEF,IAAMO,IAAI,CDH6BP,ECG1BK,MDHkC,CAACJ,CCG3B,CAACK,CDHiB,CAAa,UAAAJ,CCGvC,CAAuB,EDHoB,EAAI,eCG/C,CAAb;ADFE,ADCA,AEEF,IAAMM,EFFAhB,GAAG,CEEG,EFFA,CEEGa,CFFb,CAFsB,CAItB,KEAqB,CAACC,aAAT,CAAuB,SAAvB,CAAf,KDHwCP,IAAI,CAACI,MAAL,CAAYD,IAAI,GAAG,CAAnB,CAAtC;AACD,ADGC,GCLqC,CAApB,ACKXO,WAAsBF,KAAtBE;ADLW,CAAnB,GCKkBC,UAAYH,KAAZG;AFChB,AEAF,IAAIC,EFAIlB,KAAK,EEAb,CFAgB,CEEhB,EFFE;eCFaK;ADGb,AEEF,IAAMc,EFFAnB,KAAK,CAACC,IAAN,AEEY,CFFDH,EEEI,CFFf,CAAJ,EAAqB,KEEjBqB,YAAe,CAAAC,KAAK;AFDtB,AECsB,SAAIA,EFDnBtB,GAAG,AECqB,CFDpBI,AECqBmB,KAAN,CAAYC,CFD/B,CAAY,IECG,CFDf,EAAmB,EAAnB,EAAuBnB,KAAvB,CAA6B,GAA7B,CAAP;AACD,AEAuB,CAA1B,EAEA;;AFAEJ,EAAAA,GAAG,CAACK,IAAJ,CAASN,GAAT;AACA,AEAF,IAAMyB,KFAGxB,GAAP,OEAmB,GAAG,SAAlBwB,eAAkB,CAACC,CAAD,EAAO;AFE9B,AEDC,CFbF,QEaSA,CAAC,GAAGN,SAAX;AACD,CAFD,EAIA;eFAerB;;AECfmB,QAAQ,CAACS,gBAAT,CAA0B,OAA1B,EAAmC;AAAA,SAAMP,SAAS,GAAGC,YAAY,CAACH,QAAD,CAA9B;AAAA,CAAnC;AAEAF,IAAI,CAACW,gBAAL,CAAsB,QAAtB,EAAgC,UAAAC,CAAC,EAAI;AACnCA,EAAAA,CAAC,CAACC,cAAF,GADmC,CAGnC;AACA;;AACA,MAAI,kCAASV,OAAO,CAACI,KAAjB,EAAwBO,IAAxB,CAA6BL,eAA7B,CAAJ,EAAmD;AACjDR,IAAAA,MAAM,CAACc,SAAP;AACD,GAFD,MAEO;AACLd,IAAAA,MAAM,CAACc,SAAP,GAAmB,+BAAWb,QAAQ,CAACK,KAApB,EAA2B,kCAASJ,OAAO,CAACI,KAAjB,CAA3B,EAAoDS,IAApD,CAAyD,EAAzD,CAAnB;AACD;AACF,CAVD","file":"password-character-helper.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// Turn string into an array, broken on the comma\r\nconst strToArr = str => {\r\n  // Init an empty array ready to store the letters\r\n  let arr = [];\r\n\r\n  // If the string contains a comma split the sting into an array\r\n  // Else push the number into an array on it's own\r\n  const regex = /,/;\r\n  if (regex.test(str)) {\r\n    return str.replace(/\\s/g, '').split(',');\r\n  }\r\n\r\n  arr.push(str);\r\n  return arr;\r\n \r\n};\r\n\r\nexport default strToArr;\r\n","// Check the positions entered\r\nconst getLetters = (word, position) => position.map(item => {\r\n  return `<span class=\"output-letter\">${word.charAt(item - 1)}</span>`;\r\n});\r\n\r\nexport default getLetters;\r\n","import strToArr from './handlers/handleStringToArray';\r\nimport getLetters from './handlers/handleGetLetters';\r\n\r\nconst app = document.querySelector('#app');\r\nconst form = document.querySelector('#password-checker');\r\nconst output = document.querySelector('.output');\r\nconst { password, letters } = form;\r\nlet pwdLength;\r\n\r\n// Count the number of letters in the password\r\nconst countLetters = input => input.value.length;\r\n\r\n// Check if number is greater than password\r\nconst isBiggerThanPwd = (x) => {\r\n  return x > pwdLength;\r\n}\r\n\r\n// Count the number of letters in the password\r\npassword.addEventListener('keyup', () => pwdLength = countLetters(password));\r\n\r\nform.addEventListener('submit', e => {\r\n  e.preventDefault();\r\n  \r\n  // the .some method checks our array to see if at least one element passes the test\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some \r\n  if (strToArr(letters.value).some(isBiggerThanPwd)) {\r\n    output.innerHTML = `<p>There aren't that many letters in your password ðŸ¤¦</p>`;\r\n  } else {\r\n    output.innerHTML = getLetters(password.value, strToArr(letters.value)).join('');\r\n  }\r\n});\r\n"]}